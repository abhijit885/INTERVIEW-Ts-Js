Why Flutter ?
    1.Object Oriented
2.A Fast Compiler
3.AOT(ahead - at - time) & JIT(Just -in -time)
4.strongly typed language
5.null sefty => (?,!,late)
if any value is not assign in veriable that time it will be null to avoid null value use null sefty .un necesory app not crashed 
if prelimenary value is NULL that time use '?'. 
if in a veriable is 100% value exist that time use '!'.
void main() {
    String?name;  //null check operator used in null value
    string name; 
    convertString(name!);
}
convertString(value){
    print(int.parse(value));
}
let => works like initialy null but va assign in after some time
6.hot relode
7.hot restart

    ** DataType **
    1.Number(integer
int age = 20;
, double
double a = 20.6)
2.string
string name = "Abhijit"
3.boolean
bool active = true
4.List
List myList = [2, 8, 3, 7] //Like array same type first will 0 index collection of values
    .length
    .add()
    .addAll()
    .insert(0, "ss")
    .replaceRange(start, end, values)

5.set
Set mySet = { "qaa", "gd", "yh", "bvf", } //set is like object
6.map //set is like object or JSON object with key value pare dynamic is for any type can use
map < String, dynamic > myMap ={
    'name' : 'abhijit',
        'age' : 43
};
//dymanic means value of the key is not spacified like it may be string,bool,int
7.Rune => charcodes value convert in imoges

var is use there when we don't specify the datatype of a value
\*\* dart os statically type language
var b = "saha" //var is for when you not declare the data type
// top level function(from where code execution starts)

void main(){

}

** Operators **
    Arithmetic
equality
type test operator (is(return true or false) , is!(return false or true))
bitwise
assignment
logical
conditional(? : , ?? (null checker))

** Conditional statement **
if else if,else ,switch

** loops **
for =>
for(var i=0;i<10;i++){
    if(i == 5){
        continue;//output => 012346789
    }
    if (i == 5) {
        break; //output =>01234
    }
    print(i)
}
for in
List myList = ["1","2","3","4","5"];
for (var element in myList){
    print(myList);
};
for-each
var myList2 = [
    {"name":"abhijit"},
    {"name":"abhijit"},
    {"name":"abhijit"},
];
myList2.forEach((element) {
    print(element['name']);
});
while
int i = 1;
int val = 5
while (i<=5){
    print(i);
    i++;
}
do while
do{
    print(i);
    i++;
} while (i<=value);
** List / Array **

                    Growable List

                        ** Map **
                        map

                        ** Enum ** <custom datatype>
                            Enumeration - Enum
                            void main(){
                                final gender = Gender.>Male
                            switch () {
        case Gender.mail:
                            print("gender is male")
    }
}
                            enum Gender {Male, Female, Unknown}

                            **Runtime error vs Compiletime Error**
                            cyntex error is Compiletime Error
                            after compilation and run error is Runtime error

                            **Function**
                            define a function
                            demo() {
                            };
                            calling a function
                            demo();
                            parameterized a function
                            add(a,b){
                                c = a + b;
                            return c;
};
                            add(2,6);
                            arrow a function //default return
arrowFunc() => { };
                            arrowFunc();
                            return from a function
                            example(){
    return 10*20
}
                            optional positional parameter
                            add(a,b,[m,n]){ //[] in this are optional
                                c = a + b;
                            return c;
};
                            add(2,6);
                            optional named parameter
                            add(a,b,{m, n}){ //{} in this are named 
                                c = a + b;
                            return c;
};
                            add(2,6,m:40);
                            optional link parameter
hire order function =>a function return another function or take a function as a perameter to another function.
                            **perameter to another function
                            void main(){
                                addTwoNum(){
                                print(10 * 20);
                            mainFunction(addTwoNum);
}
}
                            mainFunction(Function function){
                                function ()
}
                            **a function return another function
                            void main(){
                                mainFunction()();
};
                            mainFunction(){
return () => {
                                print("return a function")
                            };
};
                            functional programming

                            **Object Oriented programming**
Class => blueprint of schema of a object
Object => instance of class
constructor => same name of class
static => in a class you can make a vareable or function static so no need to make object to access those vereable or function  
Ingeritance =>
                            void main(){
var son = Son();
                            print(son.age);
                            print(son.name);
                            sone.methodOne();
}
                            class Father{
                                int age =50;
                            methodOne(){
                                print("abhijit");
}
                            int age =500;
                            methodTwo(){
                                print("saha");
}
}
                            class Son extend Father {
                                int name = "wqwqw";
}
Polymorphism => method overloading and method over riding
method overriding => change any function or value in perent class from child class
                            void main(){
var son = Son();
                            print(son.age);
                            print(son.name);
                            sone.methodOne();
}
                            class Father{
                                int age =50;
                            methodOne(){
                                print("abhijit");
}
                            int age =500;
                            methodTwo(){
                                print("saha");
}
}
                            class Son extend Father {
                                int name = "wqwqw";
                            @override
                            methodOne(){
                                print("method overriding");
}
}
Abstraction => can't create instance ,object of that class but if that abstract class us extend with another class that can access those methods
Encapsulation => restrection the value and methods privet and public , in came page privet is not work must in diffrent pages

                            class Example {
                                int ? _age //privet variable start with _
    set setAge(int a){ // using set keyword set value privet 
                                _age = a;
    };
                            get getAge{ // using get keyword get  privet value
        return _age;
    };
};
Interface => also like blue preant ,use keyword implements,also @override methods which are in parent class
                            in extends(Inheritance) @override methods which are in parent class not requred,
                            extends keyword use in Inheritance and implements keyword use in interface
                            multiple Inheritance not possable but multiple interface is possable
                            class A {
                                int age =50;
                            methodOne(){
                                print("abhijit");
}
                            int age =500;
                            methodTwo(){
                                print("saha");
}
}
                            class B implements A{
                                @override methodOne(){
                            }
                            @override methodTwo(){
                            }
}

                            Asynchronous programming
                            Exception Handling

                            **Youtube**
                            Afran Sarkar
                            Baaba Devs
                            codeX
                            Codepur
                            Ahirlog
                            Rabbil Hasan
