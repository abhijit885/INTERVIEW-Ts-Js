flutter is a UI toolkit (light wait)
react is a librery (no spacifec boundation)
anguler is a freamwork (bundetion in use spacifec things)
single code base
CLI(is very helpfull commend kine interface)
devtool is very powerful
Pub.dev for all packages
**FLUTER ARCHITECTURE**
3layer
1.EMBEDDER(is responsable for run the application on system)
2.ENGINE(is written in C++ in/op ,network request,rendering pixels on screen )
3.FRAMEWORK(it is very small most all the devloper work on it with metireal,widgets,Animations,Gastures )

**Flutter Widgets**
1.Text
2.container
3.row
4.Column
5.Stack
6.Textfields
7.Hero
8.Scaffold
9.Appbar
10.Buttons

**Advance**
List
collections
Itarebles
Lambdas
functional programing
async/awate
Future
streams

**Shared preferences(android),UserDefaults(IOS),Local storage**
**SQL Light,Firebase**
**JSON,JSON Parsing, Serialize & Deserialize**
**Responsive Design**
**Navigation**
**Material design VS Cupatino Design**
**Animation**
implecit and explecit animation
**User input and form Validation**
**Theame Font Assets local Database payment getway Map LowLevel API(camera,battery acccess)**
**State Management(Provider,RiverPod,getX,Bloc,Cubic)Approach**
//normal setState **every time it rerender the page whenever state update**
int initaValue = 60;
@override
void initState(){
Timer.periodic(Duration(seconds: 1), (t){
    setState(() {
        initalValue--;
    });
});
}
**Provider**
step-01
creat model for provider & create instance of model using changeNotifireProvider()
step-02
update the data in model with notifylisteners()
step-03
consumer() consume or update the date inside widgets 
**BloC**//Buisness Logic Component (Buisness Logic is seperated from your UI is recomended for Big Project )
1.streamBuilder()
2.streamController()
  2 things in streamController stream and sink

**GetX**follow MVC pattern model(skema),view,controller(have all the state)
1.state management =>>
class Controller extends GetxController{
var count = 0.obs
increment() => count++;
};
<= how lesson this data =>
1.GetBuilder(very first ,takes less memory,update the property manualy,wrape with getX widget.in ui to update the UI,no stream is there)  
*normal types
*setState()
*manual call update(); method
*light
example
var testAmount =0.0;(normal variable)
getBuilder<CartController>(
initState:
builder:(controller){
return Text(controller.testAmount);
};
)
2.GetX(reactive approach,continue lesson data,wrape with getX widget.in ui to update the UI,return a controller)
_.obs(use obserbeable variable)
_.use streams in backend
_.auto update
_.weight normal
Example
var cartItems = List<Product>().obs;(use obserbeable variable)
getX<CartController>(
initState:
builder:(controller){
return Text(controller.cartItems);
};
)
3.Obx(very first,no builder,no controller,no init state,not return any controller)
Obx((){
return Text(CartController.cartItems);
};
)
GetX VS Obx
if have the instance of controller,access to controller in same class that time use GetX ,if not availebel use Obx
2.rout management
Get.to(CartPage());
3.dependency(ingection) management => use a class functionality to other class just use get will hold the instance in memory.hold the instance of controller.
final cartController = Get.put(CartController());
to get the data in other page use => get.find();

4.internationalization
translate class will help with any language
5.validation,storage,theme,snackbar,dialog

**RiverPod**
**Cubic**

**Devtools**
**RxDart**
**API integration,HTTP request handling**
** thread, multithread, stream , compute async , Isolate , eventLoop , Reusable Weget **
**unit test ,integration test,weget test**
**how to deploy in playstore,apple store,deploy flutter web app production release**

---
